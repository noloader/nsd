language: c

git:
  depth: 5

addons:
  apt:
    update: true
    packages: [ autoconf automake libtool bison flex libssl-dev libevent-dev clang gcc ]
  homebrew:
    update: true
    packages: [ autoconf automake libtool bison flex openssl libevent ]

linux_gcc: &linux_gcc
  os: linux
  dist: bionic
  compiler: gcc
  addons:
    apt:
      update: true
      sources:
        - sourceline: 'ppa:ubuntu-toolchain-r/test'
      packages: [ autoconf automake libtool pkg-config bison flex libssl-dev libevent-dev clang gcc-9 ]
    homebrew:
      update: true
      packages: [ autoconf automake libtool openssl libevent ]

install_coverity: &install_coverity
  if [ "${COVERITY_SCAN}" = "true" ]; then
    COV_DIR="/tmp/coverity-scan-analysis";
    COV_ARC="/tmp/cov-analysis-${COV_PLATFORM}.tgz";
    test ! -d "${COV_DIR}" &&
      mkdir -p "${COV_DIR}" &&
      curl -s -S -F project="${TRAVIS_REPO_SLUG}"
                 -F token="${COVERITY_SCAN_TOKEN}"
                 -o "${COV_ARC}"
                 "https://scan.coverity.com/download/cxx/${COV_PLATFORM}" &&
      tar -xzf "${COV_ARC}" -C "${COV_DIR}";
    COV_ANALYSIS=$(find "${COV_DIR}" -type d -name "cov-analysis*");
    eval "export PATH=\"${PATH}:${COV_ANALYSIS}/bin\"";
    eval "export SCAN_BUILD=\"cov-build --dir cov-int\"";
    cov-configure --comptype ${COV_COMPTYPE} --compiler ${CC} --template;
  fi

submit_to_coverity_scan: &submit_to_coverity_scan
  if [ "${COVERITY_SCAN}" = "true" ]; then
    tar -czf analysis-results.tgz cov-int &&
    curl -s -S -F project="${TRAVIS_REPO_SLUG}"
               -F token="${COVERITY_SCAN_TOKEN}"
               -F file=@analysis-results.tgz
               -F version=$(git rev-parse --short HEAD)
               -F description="Travis CI build"
               -F email="${COVERITY_EMAIL:=spam@nlnetlabs.nl}"
               "https://scan.coverity.com/builds";
  fi

install:
  - *install_coverity

before_script:
  - autoreconf

script:
  - |
    if [[ "${COVERITY_SCAN}" == true ]]; then
      ./configure ${CONFIG_OPTS}
      ${SCAN_BUILD} make -j 2
    elif [[ "${TEST_UBSAN}" == true ]]; then
      export CFLAGS="-DNDEBUG -g2 -O2 -fsanitize=undefined -fno-sanitize-recover"
      ./configure ${CONFIG_OPTS}
      make -j 2 && make cutest && ./cutest
    elif [[ "${TEST_ASAN}" == true ]]; then
      export CFLAGS="-DNDEBUG -g2 -O2 -fsanitize=address"
      ./configure ${CONFIG_OPTS}
      make -j 2 && make cutest && ./cutest
    elif [[ "${TEST_CHECKSEC}" == true ]]; then
      ./configure ${CONFIG_OPTS}
      make -j 2 check
    elif [[ "${TEST_ANALYZE}" == true ]]; then
      ./configure ${CONFIG_OPTS}
      make -j 2 && make cutest && ./cutest
      (cd tpkg; cd clang-analysis.tdir; bash clang-analysis.test)
    else
      ./configure ${CONFIG_OPTS}
      make -j 2 && make cutest && ./cutest
    fi

after_success:
  - |
    if [[ "${COVERITY_SCAN}" == true ]]; then
      *submit_to_coverity_scan
    fi

jobs:
  include:
    - <<: *linux_gcc
      name: Coverity, GCC-9, Linux, Amd64
      env:
        - COVERITY_SCAN=true
        - CC=gcc-9
        - COV_COMPTYPE=gcc
        - COV_PLATFORM=linux64
        - CONFIG_OPTS="--enable-checking --disable-flto"
      if: env(TRAVIS_EVENT_TYPE) = cron
    - <<: *linux_gcc
      name: No Coverity, GCC-9, Linux, Amd64
      env:
        - COVERITY_SCAN=false
        - CC=gcc-9
        - CONFIG_OPTS="--enable-checking --disable-flto"
    - name: GCC, Linux, Amd64
      os: linux
      dist: bionic
      compiler: gcc
      env:
        - CONFIG_OPTS=
    - name: Clang, Linux, Amd64
      os: linux
      dist: bionic
      compiler: clang
      env:
        - CONFIG_OPTS=
    - name: Clang, OS X, Amd64
      os: osx
      compiler: clang
      env:
        - CONFIG_OPTS="--with-ssl=/usr/local/opt/openssl --with-libevent=/usr/local/opt/libevent"
    - name: Checksec, GCC, Linux, Amd64
      os: linux
      dist: bionic
      compiler: gcc
      env:
        - TEST_CHECKSEC=true
        - CONFIG_OPTS="--enable-checking --disable-flto"
    - name: Checksec, Clang, Linux, Amd64
      os: linux
      dist: bionic
      compiler: clang
      env:
        - TEST_CHECKSEC=true
        - CONFIG_OPTS="--enable-checking --disable-flto"
    - name: UBsan, GCC, Linux, Amd64
      os: linux
      dist: bionic
      compiler: gcc
      env:
        - TEST_UBSAN=true
        - CONFIG_OPTS="--enable-checking --disable-flto"
    - name: UBsan, Clang, Linux, Amd64
      os: linux
      dist: bionic
      compiler: clang
      env:
        - TEST_UBSAN=true
        - CONFIG_OPTS="--enable-checking --disable-flto"
    - name: UBsan, Clang, OS X, Amd64
      os: osx
      compiler: clang
      env:
        - TEST_UBSAN=true
        - CONFIG_OPTS="--enable-checking --disable-flto --with-ssl=/usr/local/opt/openssl --with-libevent=/usr/local/opt/libevent"
    - name: Asan, GCC, Linux, Amd64
      os: linux
      dist: bionic
      compiler: gcc
      env:
        - TEST_ASAN=true
        - CONFIG_OPTS="--enable-checking --disable-flto"
    - name: Asan, Clang, Linux, Amd64
      os: linux
      dist: bionic
      compiler: clang
      env:
        - TEST_ASAN=true
        - CONFIG_OPTS="--enable-checking --disable-flto"
    - name: Asan, Clang, OS X, Amd64
      os: osx
      compiler: clang
      env:
        - TEST_ASAN=true
        - CONFIG_OPTS="--enable-checking --disable-flto --with-ssl=/usr/local/opt/openssl --with-libevent=/usr/local/opt/libevent"
    - name: Anazlyze, GCC, Linux, Amd64
      os: linux
      dist: bionic
      compiler: gcc
      env:
        - TEST_ANALYZE=true
        - CONFIG_OPTS="--enable-checking --disable-flto"
    - name: Anazlyze, Clang, Linux, Amd64
      os: linux
      dist: bionic
      compiler: clang
      env:
        - TEST_ANALYZE=true
        - CONFIG_OPTS="--enable-checking --disable-flto"
    - name: Anazlyze, Clang, OS X, Amd64
      os: osx
      compiler: clang
      env:
        - TEST_ANALYZE=true
        - CONFIG_OPTS="--enable-checking --disable-flto --with-ssl=/usr/local/opt/openssl --with-libevent=/usr/local/opt/libevent"
